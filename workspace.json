{
  "version": 2,
  "projects": {
    "api": {
      "root": "apps/api",
      "sourceRoot": "apps/api/src",
      "projectType": "application",
      "targets": {
        "build": {
          "executor": "@nrwl/node:build",
          "outputs": ["{options.outputPath}"],
          "options": {
            "outputPath": "dist/apps/api",
            "main": "apps/api/src/main.ts",
            "tsConfig": "apps/api/tsconfig.app.json",
            "assets": ["apps/api/src/assets"]
          },
          "configurations": {
            "production": {
              "optimization": true,
              "extractLicenses": true,
              "inspect": false,
              "fileReplacements": [
                {
                  "replace": "apps/api/src/environments/environment.ts",
                  "with": "apps/api/src/environments/environment.prod.ts"
                }
              ]
            }
          }
        },
        "build-docker": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              {
                "command": "docker build -f apps/api/Dockerfile -t psni_api .",
                "forwardAllArgs": false
              },
              "docker tag psni_api gcr.io/{args.projectid}/psnextv1-{args.branch}-api:{args.sha}",
              "docker push gcr.io/{args.projectid}/psnextv1-{args.branch}-api:{args.sha}"
            ],
            "parallel": false,
            "forwardAllArgs": false
          }
        },
        "k8s-deploy": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "find ./apps/api/k8s -name kustomization.yaml -type f -exec sed -i 's/BRANCH/{args.branch}/g' {} \\;",
              "find ./apps/api/k8s -name kustomization.yaml -type f -exec sed -i 's/TAG/{args.sha}/g' {} \\;",
              "find ./apps/api/k8s -name kustomization.yaml -type f -exec sed -i 's/PROJECTID/{args.projectid}/g' {} \\;",
              {
                "command": "kubectl kustomize ./apps/api/k8s",
                "forwardAllArgs": false
              },
              "kubectl apply -k ./apps/api/k8s -n {args.branch}"
            ],
            "parallel": false
          }
        },
        "serve": {
          "executor": "@nrwl/node:execute",
          "options": {
            "buildTarget": "api:build"
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/api/**/*.ts"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/apps/api"],
          "options": {
            "jestConfig": "apps/api/jest.config.js",
            "passWithNoTests": true
          }
        }
      },
      "tags": []
    },
    "data": {
      "root": "apps/data",
      "sourceRoot": "apps/data/src",
      "projectType": "application",
      "targets": {
        "build": {
          "executor": "@nrwl/web:webpack",
          "outputs": ["{options.outputPath}"],
          "options": {
            "outputPath": "dist/apps/data",
            "index": "apps/data/src/index.html",
            "main": "apps/data/src/main.tsx",
            "polyfills": "apps/data/src/polyfills.ts",
            "tsConfig": "apps/data/tsconfig.app.json",
            "assets": ["apps/data/src/favicon.ico", "apps/data/src/assets"],
            "styles": ["apps/data/src/styles.scss"],
            "scripts": [],
            "webpackConfig": "@nrwl/react/plugins/webpack"
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "apps/data/src/environments/environment.ts",
                  "with": "apps/data/src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "extractCss": true,
              "namedChunks": false,
              "extractLicenses": true,
              "vendorChunk": false,
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                }
              ]
            }
          }
        },
        "serve": {
          "executor": "@nrwl/web:dev-server",
          "options": {
            "buildTarget": "data:build",
            "hmr": true,
            "proxyConfig": "apps/data/proxy.conf.json"
          },
          "configurations": {
            "production": {
              "buildTarget": "data:build:production",
              "hmr": false
            }
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/data/**/*.{ts,tsx,js,jsx}"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/apps/data"],
          "options": {
            "jestConfig": "apps/data/jest.config.js",
            "passWithNoTests": true
          }
        },
        "build-docker": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              {
                "command": "docker build -f apps/data/Dockerfile -t psni_data .",
                "forwardAllArgs": false
              },
              "docker tag psni_data gcr.io/{args.projectid}/psnextv1-{args.branch}-data:{args.sha}",
              "docker push gcr.io/{args.projectid}/psnextv1-{args.branch}-data:{args.sha}"
            ],
            "parallel": false
          }
        },
        "k8s-deploy": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "find ./apps/data/k8s -name kustomization.yaml -type f -exec sed -i 's/BRANCH/{args.branch}/g' {} \\;",
              "find ./apps/data/k8s -name kustomization.yaml -type f -exec sed -i 's/PROJECTID/{args.projectid}/g' {} \\;",
              "find ./apps/data/k8s -name kustomization.yaml -type f -exec sed -i 's/TAG/{args.sha}/g' {} \\;",
              {
                "command": "kubectl kustomize ./apps/data/k8s",
                "forwardAllArgs": false
              },
              "kubectl apply -k ./apps/data/k8s -n {args.branch}"
            ],
            "parallel": false,
            "forwardAllArgs": false
          }
        }
      },
      "tags": []
    },
    "data-e2e": {
      "root": "apps/data-e2e",
      "sourceRoot": "apps/data-e2e/src",
      "projectType": "application",
      "targets": {
        "e2e": {
          "executor": "@nrwl/cypress:cypress",
          "options": {
            "cypressConfig": "apps/data-e2e/cypress.json",
            "devServerTarget": "data:serve"
          },
          "configurations": {
            "production": {
              "devServerTarget": "data:serve:production"
            }
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/data-e2e/**/*.{js,ts}"]
          }
        }
      },
      "tags": [],
      "implicitDependencies": ["data"]
    },
    "hackathon": {
      "root": "apps/hackathon",
      "sourceRoot": "apps/hackathon/src",
      "projectType": "application",
      "targets": {
        "build": {
          "executor": "@nrwl/web:webpack",
          "outputs": ["{options.outputPath}"],
          "defaultConfiguration": "production",
          "options": {
            "compiler": "babel",
            "outputPath": "dist/apps/hackathon",
            "index": "apps/hackathon/src/index.html",
            "baseHref": "/",
            "main": "apps/hackathon/src/main.js",
            "polyfills": "apps/hackathon/src/polyfills.js",
            "tsConfig": "apps/hackathon/tsconfig.app.json",
            "assets": [
              "apps/hackathon/src/favicon.ico",
              "apps/hackathon/src/assets"
            ],
            "styles": ["apps/hackathon/src/styles.css"],
            "scripts": [],
            "webpackConfig": "@nrwl/react/plugins/webpack"
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "apps/hackathon/src/environments/environment.js",
                  "with": "apps/hackathon/src/environments/environment.prod.js"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "namedChunks": false,
              "extractLicenses": true,
              "vendorChunk": false
            }
          }
        },
        "serve": {
          "executor": "@nrwl/web:dev-server",
          "options": {
            "buildTarget": "hackathon:build",
            "hmr": true,
            "proxyConfig": "apps/hackathon/proxy.conf.json"
          },
          "configurations": {
            "production": {
              "buildTarget": "hackathon:build:production",
              "hmr": false
            }
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/hackathon/**/*.{ts,tsx,js,jsx}"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/apps/hackathon"],
          "options": {
            "jestConfig": "apps/hackathon/jest.config.js",
            "passWithNoTests": true
          }
        },
        "build-docker": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              {
                "command": "docker build -f apps/hackathon/Dockerfile -t psni_hackathon .",
                "forwardAllArgs": false
              },
              "docker tag psni_hackathon gcr.io/{args.projectid}/psnextv1-{args.branch}-hackathon:{args.sha}",
              "docker push gcr.io/{args.projectid}/psnextv1-{args.branch}-hackathon:{args.sha}"
            ],
            "parallel": false
          }
        },
        "k8s-deploy": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "find ./apps/hackathon/k8s -name kustomization.yaml -type f -exec sed -i 's/BRANCH/{args.branch}/g' {} \\;",
              "find ./apps/hackathon/k8s -name kustomization.yaml -type f -exec sed -i 's/PROJECTID/{args.projectid}/g' {} \\;",
              "find ./apps/hackathon/k8s -name kustomization.yaml -type f -exec sed -i 's/TAG/{args.sha}/g' {} \\;",
              {
                "command": "kubectl kustomize ./apps/hackathon/k8s",
                "forwardAllArgs": false
              },
              "kubectl apply -k ./apps/hackathon/k8s -n {args.branch}"
            ],
            "parallel": false,
            "forwardAllArgs": false
          }
        }
      },
      "tags": []
    },
    "models": {
      "root": "libs/models",
      "sourceRoot": "libs/models/src",
      "projectType": "library",
      "targets": {
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["libs/models/**/*.ts"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/libs/models"],
          "options": {
            "jestConfig": "libs/models/jest.config.js",
            "passWithNoTests": true
          }
        }
      },
      "tags": []
    },
    "psp": {
      "projectType": "application",
      "root": "apps/psp",
      "sourceRoot": "apps/psp/src",
      "tags": [],
      "targets": {
        "build": {
          "executor": "@nrwl/web:webpack",
          "outputs": ["{options.outputPath}"],
          "defaultConfiguration": "production",
          "options": {
            "outputPath": "dist/apps/psp",
            "compiler": "babel",
            "index": "apps/psp/src/index.html",
            "baseHref": "/",
            "main": "apps/psp/src/main.ts",
            "polyfills": "apps/psp/src/polyfills.ts",
            "tsConfig": "apps/psp/tsconfig.app.json",
            "assets": ["apps/psp/src/favicon.ico", "apps/psp/src/assets"],
            "styles": ["apps/psp/src/styles.css"],
            "scripts": []
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "apps/psp/src/environments/environment.ts",
                  "with": "apps/psp/src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "namedChunks": false,
              "extractLicenses": true,
              "vendorChunk": false
            }
          }
        },
        "serve": {
          "executor": "@nrwl/web:dev-server",
          "options": {
            "buildTarget": "psp:build",
            "proxyConfig": "apps/psp/proxy.conf.json"
          },
          "configurations": {
            "production": {
              "buildTarget": "psp:build:production"
            }
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/psp/**/*.ts"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/apps/psp"],
          "options": {
            "jestConfig": "apps/psp/jest.config.js",
            "passWithNoTests": true
          }
        },

        "build-docker": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              {
                "command": "docker build -f apps/psp/Dockerfile -t psni_psp .",
                "forwardAllArgs": false
              },
              "docker tag psni_psp gcr.io/{args.projectid}/psnextv1-{args.branch}-psp:{args.sha}",
              "docker push gcr.io/{args.projectid}/psnextv1-{args.branch}-psp:{args.sha}"
            ],
            "parallel": false
          }
        },
        "k8s-deploy": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "find ./apps/psp/k8s -name kustomization.yaml -type f -exec sed -i 's/BRANCH/{args.branch}/g' {} \\;",
              "find ./apps/psp/k8s -name kustomization.yaml -type f -exec sed -i 's/PROJECTID/{args.projectid}/g' {} \\;",
              "find ./apps/psp/k8s -name kustomization.yaml -type f -exec sed -i 's/TAG/{args.sha}/g' {} \\;",
              {
                "command": "kubectl kustomize ./apps/psp/k8s",
                "forwardAllArgs": false
              },
              "kubectl apply -k ./apps/psp/k8s -n {args.branch}"
            ],
            "parallel": false,
            "forwardAllArgs": false
          }
        }
      }
    },
    "psp-e2e": {
      "root": "apps/psp-e2e",
      "sourceRoot": "apps/psp-e2e/src",
      "projectType": "application",
      "targets": {
        "e2e": {
          "executor": "@nrwl/cypress:cypress",
          "options": {
            "cypressConfig": "apps/psp-e2e/cypress.json",
            "devServerTarget": "psp:serve"
          },
          "configurations": {
            "production": {
              "devServerTarget": "psp:serve:production"
            }
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/psp-e2e/**/*.{js,ts}"]
          }
        }
      },
      "tags": [],
      "implicitDependencies": ["psp"]
    },
    "pspserver": {
      "root": "apps/pspserver",
      "sourceRoot": "apps/pspserver/src",
      "projectType": "application",
      "targets": {
        "build": {
          "executor": "@nrwl/node:build",
          "outputs": ["{options.outputPath}"],
          "options": {
            "outputPath": "dist/apps/pspserver",
            "main": "apps/pspserver/src/main.ts",
            "tsConfig": "apps/pspserver/tsconfig.app.json",
            "assets": ["apps/pspserver/src/assets"]
          },
          "configurations": {
            "production": {
              "optimization": true,
              "extractLicenses": true,
              "inspect": false,
              "fileReplacements": [
                {
                  "replace": "apps/pspserver/src/environments/environment.ts",
                  "with": "apps/pspserver/src/environments/environment.prod.ts"
                }
              ]
            }
          }
        },
        "serve": {
          "executor": "@nrwl/node:execute",
          "options": {
            "buildTarget": "pspserver:build"
          }
        },
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["apps/pspserver/**/*.ts"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/apps/pspserver"],
          "options": {
            "jestConfig": "apps/pspserver/jest.config.js",
            "passWithNoTests": true
          }
        },
        "build-docker": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              {
                "command": "docker build -f apps/pspserver/Dockerfile -t psni_pspserver .",
                "forwardAllArgs": false
              },
              "docker tag psni_pspserver gcr.io/{args.projectid}/psnextv1-{args.branch}-pspserver:{args.sha}",
              "docker push gcr.io/{args.projectid}/psnextv1-{args.branch}-pspserver:{args.sha}"
            ],
            "parallel": false
          }
        },
        "k8s-deploy": {
          "executor": "@nrwl/workspace:run-commands",
          "options": {
            "commands": [
              "find ./apps/pspserver/k8s -name kustomization.yaml -type f -exec sed -i 's/BRANCH/{args.branch}/g' {} \\;",
              "find ./apps/pspserver/k8s -name kustomization.yaml -type f -exec sed -i 's/PROJECTID/{args.projectid}/g' {} \\;",
              "find ./apps/pspserver/k8s -name kustomization.yaml -type f -exec sed -i 's/TAG/{args.sha}/g' {} \\;",
              {
                "command": "kubectl kustomize ./apps/pspserver/k8s",
                "forwardAllArgs": false
              },
              "kubectl apply -k ./apps/pspserver/k8s -n {args.branch}"
            ],
            "parallel": false,
            "forwardAllArgs": false
          }
        }
      },
      "tags": []
    },
    "sharedui": {
      "root": "libs/sharedui",
      "sourceRoot": "libs/sharedui/src",
      "projectType": "library",
      "targets": {
        "lint": {
          "executor": "@nrwl/linter:eslint",
          "outputs": ["{options.outputFile}"],
          "options": {
            "lintFilePatterns": ["libs/sharedui/**/*.{ts,tsx,js,jsx}"]
          }
        },
        "test": {
          "executor": "@nrwl/jest:jest",
          "outputs": ["coverage/libs/sharedui"],
          "options": {
            "jestConfig": "libs/sharedui/jest.config.js",
            "passWithNoTests": true
          }
        }
      },
      "tags": []
    }
  }
}
